# ConfigMaps for HAProxy Open Manager components
# Contains configuration data for backend, frontend, nginx and redis services
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: haproxy-openmanager
  labels:
    app: haproxy-openmanager
    component: backend
data:
  DATABASE_URL: 'postgresql://haproxy_user:haproxy_pass@postgres:5432/haproxy_openmanager'
  REDIS_URL: 'redis://redis:6379'
  PUBLIC_URL: 'https://haproxy-openmanager.example.com'
  MANAGEMENT_BASE_URL: 'https://haproxy-openmanager.example.com'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: haproxy-openmanager
  labels:
    app: haproxy-openmanager
    component: frontend
data:
  # Leave empty to use same-origin (window.location) in production
  # For development, set to: 'http://localhost:8000'
  REACT_APP_API_URL: ''

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: haproxy-openmanager
  labels:
    app: haproxy-openmanager
    component: nginx
data:
  nginx.conf: |
    pid /var/run/nginx.pid;
    worker_processes auto;

    events {
        worker_connections 1024;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        
        # Use alternative directories for non-root
        client_body_temp_path /var/cache/nginx/client_temp;
        proxy_temp_path       /var/cache/nginx/proxy_temp_path;
        fastcgi_temp_path     /var/cache/nginx/fastcgi_temp;
        uwsgi_temp_path       /var/cache/nginx/uwsgi_temp;
        scgi_temp_path        /var/cache/nginx/scgi_temp;
        
        upstream frontend {
            server frontend:3000;
        }
        
        upstream backend {
            server backend:8000;
        }

        server {
            listen 8080;
            server_name _;

            # Frontend React App
            location / {
                proxy_pass http://frontend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # WebSocket support
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
            }

            # Backend API
            location /api/ {
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Health check endpoint
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: haproxy-openmanager
  labels:
    app: haproxy-openmanager
    component: redis
data:
  redis.conf: |
    # Redis configuration (diskless mode - no persistence)
    bind 0.0.0.0
    port 6379
    timeout 0
    tcp-keepalive 300
    
    # Disable disk persistence (in-memory only)
    save ""
    appendonly no
    
    # Memory settings for timeseries data (24h retention)
    maxmemory 2gb
    maxmemory-policy volatile-lru
    
    # Performance optimizations
    tcp-backlog 511
    databases 16
    lazyfree-lazy-eviction yes
    lazyfree-lazy-expire yes
